#!/usr/bin/env python3
"""
Environment Setup Utility for ParseQri Text-to-SQL Agent

This script helps you create a .env file with proper configuration
for connecting to your database and configuring the system.
"""

import os
from pathlib import Path
from typing import Dict, Any

def get_user_input(prompt: str, default: str = "", required: bool = True) -> str:
    """Get user input with optional default value"""
    if default:
        display_prompt = f"{prompt} [{default}]: "
    else:
        display_prompt = f"{prompt}: "
    
    while True:
        value = input(display_prompt).strip()
        if value:
            return value
        elif default:
            return default
        elif not required:
            return ""
        else:
            print("This field is required. Please enter a value.")

def get_database_config(db_prefix: str = "") -> Dict[str, str]:
    """Get database configuration from user"""
    print(f"\n{'='*50}")
    if db_prefix:
        print(f"Configure {db_prefix.replace('_', ' ').title()} Database")
    else:
        print("Configure Primary Database")
    print(f"{'='*50}")
    
    # Database type
    print("\nAvailable database types:")
    print("1. MySQL")
    print("2. PostgreSQL")
    
    while True:
        db_choice = input("Select database type (1-2) [1]: ").strip()
        if db_choice == "2":
            db_type = "postgres"
            default_port = "5432"
            break
        elif db_choice == "1" or db_choice == "":
            db_type = "mysql"
            default_port = "3306"
            break
        else:
            print("Please enter 1 or 2")
    
    config = {}
    config[f"{db_prefix}DB_TYPE"] = db_type
    config[f"{db_prefix}DB_HOST"] = get_user_input("Database host", "localhost")
    config[f"{db_prefix}DB_PORT"] = get_user_input("Database port", default_port)
    config[f"{db_prefix}DB_USER"] = get_user_input("Database username", "root")
    config[f"{db_prefix}DB_PASSWORD"] = get_user_input("Database password", "root")
    config[f"{db_prefix}DB_NAME"] = get_user_input(f"Database name", 
                                                  "parseqri" if not db_prefix else "your_database")
    
    return config

def get_llm_config() -> Dict[str, str]:
    """Get LLM configuration from user"""
    print(f"\n{'='*50}")
    print("Configure LLM Settings")
    print(f"{'='*50}")
    
    config = {}
    config["LLM_API_BASE"] = get_user_input("LLM API Base URL", "http://localhost:11434")
    
    print("\nLLM Models Configuration:")
    print("(Press Enter to use defaults)")
    
    config["LLM_MODEL_SCHEMA"] = get_user_input("Schema Understanding Model", "mistral", False)
    config["LLM_MODEL_INTENT"] = get_user_input("Intent Classification Model", "llama3.1", False)
    config["LLM_MODEL_SQL"] = get_user_input("SQL Generation Model", "qwen2.5", False)
    config["LLM_MODEL_VALIDATION"] = get_user_input("SQL Validation Model", "orca2", False)
    config["LLM_MODEL_RESPONSE"] = get_user_input("Response Formatting Model", "mistral", False)
    config["LLM_MODEL_VISUALIZATION"] = get_user_input("Visualization Model", "llama3.1", False)
    config["LLM_MODEL_METADATA"] = get_user_input("Metadata Model", "llama3.1", False)
    
    return config

def get_paths_config() -> Dict[str, str]:
    """Get paths configuration from user"""
    print(f"\n{'='*50}")
    print("Configure Paths")
    print(f"{'='*50}")
    
    config = {}
    config["DATA_FOLDER"] = get_user_input("Data folder path", "../data/input", False)
    config["CHROMA_PERSIST_DIR"] = get_user_input("ChromaDB storage path", "../data/db_storage", False)
    config["CACHE_DIR"] = get_user_input("Cache directory", "cache", False)
    config["LOG_FILE"] = get_user_input("Log file path", "../data/query_logs/textsql.log", False)
    config["API_BASE_URL"] = get_user_input("API Base URL", "http://localhost:8000", False)
    
    return config

def create_env_file(config: Dict[str, str]) -> None:
    """Create .env file with the configuration"""
    env_path = Path(".env")
    
    # Check if .env file already exists
    if env_path.exists():
        overwrite = input(f"\n.env file already exists. Overwrite? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    # Create .env file content
    content = []
    content.append("# ParseQri Text-to-SQL Agent Configuration")
    content.append("# Generated by setup_env.py")
    content.append("")
    
    # Primary Database Configuration
    content.append("# Primary Database Configuration")
    for key in ["DB_TYPE", "DB_HOST", "DB_PORT", "DB_USER", "DB_PASSWORD", "DB_NAME"]:
        if key in config:
            content.append(f"{key}={config[key]}")
    content.append("")
    
    # External Database Configuration
    content.append("# External Database Configuration")
    for key in ["EXTERNAL_DB_TYPE", "EXTERNAL_DB_HOST", "EXTERNAL_DB_PORT", 
                "EXTERNAL_DB_USER", "EXTERNAL_DB_PASSWORD", "EXTERNAL_DB_NAME"]:
        if key in config:
            content.append(f"{key}={config[key]}")
    content.append("")
    
    # LLM Configuration
    content.append("# LLM Configuration")
    for key in ["LLM_API_BASE", "LLM_MODEL_SCHEMA", "LLM_MODEL_INTENT", "LLM_MODEL_SQL",
                "LLM_MODEL_VALIDATION", "LLM_MODEL_RESPONSE", "LLM_MODEL_VISUALIZATION", 
                "LLM_MODEL_METADATA"]:
        if key in config and config[key]:
            content.append(f"{key}={config[key]}")
    content.append("")
    
    # Paths Configuration
    content.append("# Paths Configuration")
    for key in ["DATA_FOLDER", "CHROMA_PERSIST_DIR", "CACHE_DIR", "LOG_FILE", "API_BASE_URL"]:
        if key in config and config[key]:
            content.append(f"{key}={config[key]}")
    
    # Write to file
    with env_path.open('w') as f:
        f.write('\n'.join(content))
    
    print(f"\n‚úÖ Configuration saved to {env_path.absolute()}")
    print("\nYou can now run the ParseQri Text-to-SQL Agent with your custom configuration!")

def main():
    """Main setup function"""
    print("üöÄ ParseQri Text-to-SQL Agent Environment Setup")
    print("="*60)
    print("This utility will help you create a .env file for configuration.")
    print("Press Ctrl+C at any time to cancel.")
    
    try:
        # Get all configurations
        config = {}
        
        # Primary database
        config.update(get_database_config())
        
        # External database
        setup_external = input("\nDo you want to configure an external database? (y/N): ").strip().lower()
        if setup_external == 'y':
            config.update(get_database_config("EXTERNAL_"))
        
        # LLM configuration
        config.update(get_llm_config())
        
        # Paths configuration
        config.update(get_paths_config())
        
        # Create .env file
        create_env_file(config)
        
        # Offer to install dependencies
        install_deps = input("\nDo you want to install required Python dependencies? (y/N): ").strip().lower()
        if install_deps == 'y':
            print("\nInstalling dependencies...")
            os.system("pip install -r requirements.txt")
            print("‚úÖ Dependencies installed!")
        
        print("\nüéâ Setup complete! You can now use the ParseQri Text-to-SQL Agent.")
        print("\nNext steps:")
        print("1. Ensure your database is running")
        print("2. Run: python main.py --list-tables")
        print("3. Try a query: python main.py 'your question'")
        
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user.")
    except Exception as e:
        print(f"\n‚ùå Error during setup: {e}")

if __name__ == "__main__":
    main() 